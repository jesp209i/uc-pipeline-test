name: pwsh pipeline

on:
  workflow_dispatch:
    inputs:
      tags: 
        description: 'Hello'
        required: false
        type: boolean

  push:
    branches:
     - master
     - powershell
     - gitchanges

env:
  projectId: ${{ vars.PROJECT_ID }} # Set as variable
  CLOUD_KEY: ${{ secrets.API_KEY }} # set as secret
  baseUrl : https://api.dev-cloud.umbraco.com
  github_pat_token: ${{ secrets.GITPAT_TOKEN }}

jobs:
  preflight:
    name: Check for changes in cloud  
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with: ${{ secrets.GITHUB_TOKEN }}

      - run: |
          mkdir -p ${{GITHUB.WORKSPACE}}/git_patch
          cd git_patch
          ls
          cd ..

      - name: Get Latest deployment
        id: latest-deployment
        shell: pwsh
        run: >
          ${{GITHUB.WORKSPACE}}/.github/powershell/get-latest-deployment-diff.ps1
          -BaseUrl ${{env.baseUrl}}
          -ProjectId ${{ env.projectId }} 
          -ApiKey ${{ env.CLOUD_KEY }} 
          -DownloadFolder ${{GITHUB.WORKSPACE}}/git_patch
          -PipelineVendor GITHUB

      - name: Apply changes
        if: ${{ steps.latest-deployment.outputs.REMOTE_CHANGES == 'yes' }}
        shell: pwsh
        run: |          
          git config user.name "Build pipeline"
          git config user.email jam@umbraco.com
          git switch -c auto/merge_remote_changes_for_${{github.run_number}}
          git apply -v ${{GITHUB.WORKSPACE}}/git_patch/${{ steps.latest-deployment.outputs.REMOTE_CHANGE_FILE }}
          Remove-Item ${{GITHUB.WORKSPACE}}/git_patch/${{ steps.latest-deployment.outputs.REMOTE_CHANGE_FILE }}
          git add -A
          git commit -m "Auto updated changes from remote for build ${{github.run_number}}" .
          git remote set-url tmp-pusher https://jesp209i:${{ env.github_pat_token }}@github.com/${{ github.repository }}
          git push --set-upstream tmp-pusher auto/merge_remote_changes_for_${{github.run_number}}


  # publish:
  #   name: Zip and Publish to Cloud
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v3

  #     # Request to prepare a deployment
  #     # - sets the commit message to be used in cloud 
  #     # - supplies you with a deploymentId to be used in the rest of the process
  #     - name: Create Deployment Meta
  #       id: deployment-meta
  #       shell: pwsh
  #       run: > 
  #         ${{GITHUB.WORKSPACE}}/.github/powershell/new-deployment.ps1 
  #         -BaseUrl ${{env.baseUrl}} 
  #         -ProjectId ${{ env.projectId }} 
  #         -ApiKey ${{ env.CLOUD_KEY }} 
  #         -CommitMessage "Run number ${{github.run_number}}" 
  #         -PipelineVendor GITHUB

  #     # switch the gitignore files so cloud does not ignore my build frontend assets
  #     # this is in order to bundle the the cloud.gitignore correctly
  #     - name: Prepare Cloud Git Ignore
  #       run: cp cloud.gitignore .gitignore
  #       shell: bash

  #     # zip everything, but what is defined in the '.zipignore'
  #     - name: Zip Source Code
  #       run: zip -r sources.zip . -x@.zipignore
  #       shell: bash

  #     # Upload your zipped artifact
  #     - name: Post Zipped Artifact
  #       shell: pwsh
  #       run: >
  #         ${{GITHUB.WORKSPACE}}/.github/powershell/add-deployment-package.ps1 
  #         -BaseUrl ${{env.baseUrl}} 
  #         -ProjectId ${{ env.projectId }} 
  #         -DeploymentId ${{ steps.deployment-meta.outputs.DEPLOYMENT_ID }} 
  #         -ApiKey ${{ env.CLOUD_KEY }}
  #         -FilePath ${{ GITHUB.WORKSPACE }}/sources.zip

  #     # Actually request to start the deployment process in cloud
  #     - name: Request Start Deployment
  #       shell: pwsh
  #       run: >
  #         ${{ GITHUB.WORKSPACE }}/.github/powershell/start-deployment.ps1 
  #         -BaseUrl ${{env.baseUrl}} 
  #         -ProjectId ${{ env.projectId }} 
  #         -DeploymentId ${{ steps.deployment-meta.outputs.DEPLOYMENT_ID }} 
  #         -ApiKey ${{ env.CLOUD_KEY }}

  #     # Poll until deployment finishes 
  #     - name: Wait for deployment completed PWSH
  #       shell: pwsh
  #       run: >
  #         ${{ GITHUB.WORKSPACE }}/.github/powershell/test-deployment-status.ps1 
  #         -BaseUrl ${{ env.baseUrl }} 
  #         -ProjectId ${{ env.projectId }} 
  #         -DeploymentId ${{ steps.deployment-meta.outputs.DEPLOYMENT_ID }} 
  #         -ApiKey ${{ env.CLOUD_KEY }}
  #       #  -TimeoutSeconds 1200
